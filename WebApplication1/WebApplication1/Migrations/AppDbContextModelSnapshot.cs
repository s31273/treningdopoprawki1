// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Genre = "Fantasy",
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 102,
                            Genre = "Fantasy",
                            Title = "Harry Potter"
                        },
                        new
                        {
                            Id = 103,
                            Genre = "History",
                            Title = "Sapiens"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Borrowing", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_Id");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int")
                        .HasColumnName("Reader_Id");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReturnStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BookId", "ReaderId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Borrowing");

                    b.HasData(
                        new
                        {
                            BookId = 101,
                            ReaderId = 1,
                            BorrowDate = new DateTime(2025, 6, 18, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            ReturnStatus = "Borrowed"
                        },
                        new
                        {
                            BookId = 102,
                            ReaderId = 2,
                            BorrowDate = new DateTime(2025, 5, 13, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            ReturnStatus = "Borrowed"
                        },
                        new
                        {
                            BookId = 103,
                            ReaderId = 1,
                            BorrowDate = new DateTime(2025, 5, 20, 17, 30, 5, 0, DateTimeKind.Unspecified),
                            ReturnStatus = "Borrowed"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Reader");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "anna.nowak@example.edu",
                            Name = "Anna Nowwak"
                        },
                        new
                        {
                            Id = 2,
                            Email = "anna.kowalska@example.edu",
                            Name = "Anna Kowalska"
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.ReaderBook", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_Id");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int")
                        .HasColumnName("Reader_Id");

                    b.HasKey("BookId", "ReaderId");

                    b.HasIndex("ReaderId");

                    b.ToTable("ReaderBook");

                    b.HasData(
                        new
                        {
                            BookId = 101,
                            ReaderId = 1
                        },
                        new
                        {
                            BookId = 102,
                            ReaderId = 2
                        },
                        new
                        {
                            BookId = 103,
                            ReaderId = 1
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Borrowing", b =>
                {
                    b.HasOne("WebApplication1.Models.Book", "Book")
                        .WithMany("Borrowings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Reader", "Reader")
                        .WithMany("Borrowings")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("WebApplication1.Models.ReaderBook", b =>
                {
                    b.HasOne("WebApplication1.Models.Book", "Book")
                        .WithMany("ReaderBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Reader", "Reader")
                        .WithMany("ReaderBooks")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("WebApplication1.Models.Book", b =>
                {
                    b.Navigation("Borrowings");

                    b.Navigation("ReaderBooks");
                });

            modelBuilder.Entity("WebApplication1.Models.Reader", b =>
                {
                    b.Navigation("Borrowings");

                    b.Navigation("ReaderBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
